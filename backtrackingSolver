def enterBoard(board):
    N = 9
    i = 0
    print("\nEnter the numbers in each row without any gap and 0 for spaces\n")
    while (i < N):
        row = input("Row " + str(i) + ": ")
        if len(row) != N:
            print("Invalid Row Length, try again")
        else:
            try:
                board.append([int(x) for x in row])
                i += 1
            except ValueError:
                print("Invalid Value, try again")

def isValid(board, pos, inp):
    fixedRow, fixedCol = pos[0], pos[1]

    # Board (N x N)
    N = len(board)

    # checking for duplicates in the particular row
    for col_num in range(N):
        if board[fixedRow][col_num] == inp:
            return False

    # checking for duplicates in the particular column
    for row_num in range(N):
        if board[row_num][fixedCol] == inp:
            return False
    
    # checking the sub Matrix (n x n)
    n = 3
    subMatrix_X = (fixedCol // n) * n
    subMatrix_Y = (fixedRow // n) * n

    for rowOffset in range(n):
        for colOffset in range(n):
            if board[subMatrix_Y + rowOffset][subMatrix_X + colOffset] == inp:
                return False
    
    return True

def solver(board):
    N = len(board)
    for row_num in range(N):
        for col_num in range(N):
            if board[row_num][col_num] == 0:
                for inp in range(1, 10):
                    if isValid(board, (row_num, col_num), inp):
                        board[row_num][col_num] = inp
                        if (solver(board)):
                            return True
                        else:
                            board[row_num][col_num] = 0
                        
                return False
    
    return True

def printBoard(board):
    N = 9
    n = 3
    for row_num in range(N):
        if row_num % n == 0:
            print('+' + "-"*23 + '+')

        for col_num in range(N):
            if col_num % n == 0:
                print("| ", end="")

            if col_num == 8:
                print(str(board[row_num][col_num]) + " |")
            else:
                print(str(board[row_num][col_num]) + " ", end="")
    print('+' + "-"*23 + '+')

def main():
    myBoard = []
    enterBoard(myBoard)
    print("\n Given Board: \n")
    printBoard(myBoard)
    print("\n" + "*"*30)
    if solver(myBoard):
        print("\n Found a solution : \n")
        printBoard(myBoard)
        print()
    else:
        print("The board is not solvable")

main()